import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime
import json
import os
from auth import AuthSystem, AuthWindow


class TemperatureConverter:

    @staticmethod
    def c_to_f(celsius):
        """–¶–µ–ª—å—Å–∏–π ‚Üí –§–∞—Ä–µ–Ω–≥–µ–π—Ç"""
        if celsius < -273.15:
            raise ValueError("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∏–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –Ω—É–ª—è!")
        return (celsius * 9 / 5) + 32

    @staticmethod
    def f_to_c(fahrenheit):
        """–§–∞—Ä–µ–Ω–≥–µ–π—Ç ‚Üí –¶–µ–ª—å—Å–∏–π"""
        if fahrenheit < -459.67:
            raise ValueError("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∏–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –Ω—É–ª—è!")
        return (fahrenheit - 32) * 5 / 9

    @staticmethod
    def c_to_k(celsius):
        """–¶–µ–ª—å—Å–∏–π ‚Üí –ö–µ–ª—å–≤–∏–Ω"""
        if celsius < -273.15:
            raise ValueError("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∏–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –Ω—É–ª—è!")
        return celsius + 273.15

    @staticmethod
    def k_to_c(kelvin):
        """–ö–µ–ª—å–≤–∏–Ω ‚Üí –¶–µ–ª—å—Å–∏–π"""
        if kelvin < 0:
            raise ValueError("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∏–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –Ω—É–ª—è!")
        return kelvin - 273.15

    @staticmethod
    def f_to_k(fahrenheit):
        """–§–∞—Ä–µ–Ω–≥–µ–π—Ç ‚Üí –ö–µ–ª—å–≤–∏–Ω"""
        return TemperatureConverter.c_to_k(TemperatureConverter.f_to_c(fahrenheit))

    @staticmethod
    def k_to_f(kelvin):
        """–ö–µ–ª—å–≤–∏–Ω ‚Üí –§–∞—Ä–µ–Ω–≥–µ–π—Ç"""
        return TemperatureConverter.c_to_f(TemperatureConverter.k_to_c(kelvin))

    def __init__(self, root):
        self.root = root
        self.root.title("–£–º–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä")
        self.root.geometry("500x500")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.auth_system = AuthSystem()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.show_auth_window()

        # –ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π
        self.history = []
        self.load_history()

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.mode = tk.StringVar(value='c_to_f')
        self.input_var = tk.StringVar()
        self.valid_input = tk.BooleanVar(value=True)  # –î–æ–±–∞–≤–ª–µ–Ω–æ

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        self.validate_cmd = root.register(self.validate_input)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()

    def show_auth_window(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        # –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∫–∞ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
        self.root.withdraw()

        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_window = AuthWindow(
            self.auth_system,
            on_success_callback=self.on_auth_success
        )

        # –ñ–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.root.wait_window(auth_window.auth_window)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
        if not self.auth_system.get_current_user():
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.root.destroy()

    def on_auth_success(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
            self.root.deiconify()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.history = []
            self.load_history()

            # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            self.input_var = tk.StringVar()
            self.valid_input = tk.BooleanVar(value=True)
            self.from_unit = tk.StringVar(value="–¶–µ–ª—å—Å–∏–π")
            self.to_unit = tk.StringVar(value="–§–∞—Ä–µ–Ω–≥–µ–π—Ç")

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            self.validate_cmd = self.root.register(self.validate_input)

            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self.create_widgets()

            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.create_user_menu()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {str(e)}")

    def create_user_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)

        user_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label=f"üë§ {self.auth_system.get_current_user()}", menu=user_menu)
        user_menu.add_command(label="–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", command=self.change_password)
        user_menu.add_separator()
        user_menu.add_command(label="–í—ã–π—Ç–∏", command=self.logout)

    def change_password(self):
        """–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è"""
        pass

    def logout(self):
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        self.auth_system.logout()
        # –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        for widget in self.root.winfo_children():
            widget.destroy()
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–Ω–æ–≤–∞
        self.show_auth_window()

    def create_widgets(self):
        # –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ - –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
        main_frame = ttk.Frame(self.root, padding="15")
        main_frame.pack(fill=tk.BOTH, expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            main_frame,
            text="–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä",
            font=("Arial", 16, "bold")
        )
        title_label.pack(pady=(0, 20))

        # –§—Ä–µ–π–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        conversion_frame = ttk.LabelFrame(main_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é")
        conversion_frame.pack(fill=tk.X, pady=10)

        # –í—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏
        input_frame = ttk.Frame(conversion_frame)
        input_frame.pack(fill=tk.X, pady=10)

        ttk.Label(input_frame, text="–ò–∑:").pack(side=tk.LEFT, padx=(0, 10))

        self.from_unit = ttk.Combobox(
            input_frame,
            values=["–¶–µ–ª—å—Å–∏–π", "–§–∞—Ä–µ–Ω–≥–µ–π—Ç", "–ö–µ–ª—å–≤–∏–Ω"],
            state="readonly",
            width=15
        )
        self.from_unit.set("–¶–µ–ª—å—Å–∏–π")
        self.from_unit.pack(side=tk.LEFT, padx=(0, 20))

        ttk.Label(input_frame, text="–≤:").pack(side=tk.LEFT, padx=(0, 10))

        self.to_unit = ttk.Combobox(
            input_frame,
            values=["–§–∞—Ä–µ–Ω–≥–µ–π—Ç", "–ö–µ–ª—å–≤–∏–Ω", "–¶–µ–ª—å—Å–∏–π"],
            state="readonly",
            width=15
        )
        self.to_unit.set("–§–∞—Ä–µ–Ω–≥–µ–π—Ç")
        self.to_unit.pack(side=tk.LEFT)

        # –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–ò–í–Ø–ó–ö–£ –°–û–ë–´–¢–ò–ô –ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø –ö–û–ú–ë–û–ë–û–ö–°–û–í
        self.from_unit.bind("<<ComboboxSelected>>", lambda e: self.on_unit_change())
        self.to_unit.bind("<<ComboboxSelected>>", lambda e: self.on_unit_change())

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        input_label_frame = ttk.LabelFrame(main_frame)
        input_label_frame.pack(fill=tk.X, pady=10)

        ttk.Label(input_label_frame, text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É:", font=("Arial", 10)).pack(anchor=tk.W)

        self.entry = ttk.Entry(
            main_frame,
            textvariable=self.input_var,
            validate="key",
            validatecommand=(self.validate_cmd, "%P"),
            font=("Arial", 12)
        )
        self.entry.pack(fill=tk.X, pady=(0, 10))
        self.entry.focus_set()

        # –ë–∏–Ω–¥–∏–Ω–≥–∏ –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞
        self.entry.bind("<Return>", lambda e: self.convert())

        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
        self.validation_label = ttk.Label(
            main_frame,
            text="",
            foreground="red",
            font=("Arial", 9)
        )
        self.validation_label.pack(anchor=tk.W)

        # –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        self.valid_input.trace_add("write", self.update_validation_status)

        # –ö–Ω–æ–ø–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        convert_btn = ttk.Button(
            main_frame,
            text="–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å",
            command=self.convert,
            style="Accent.TButton"
        )
        convert_btn.pack(pady=15)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        result_frame = tk.Frame(main_frame)
        result_frame.pack(fill=tk.X, pady=10)

        ttk.Label(result_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç:", font=("Arial", 11, "bold")).pack(anchor=tk.W)

        self.result_label = ttk.Label(
            result_frame,
            text="‚Äî",
            font=("Arial", 14, "bold"),
            foreground="#2c3e50"
        )
        self.result_label.pack(anchor=tk.W, pady=(5, 0))

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        history_btn = tk.Button(
            main_frame,
            text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
            command=self.open_history_window,
            font=("Arial", 11, "bold"),
            bg="#2E7D32",  # –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
            fg="white",  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
            padx=30,  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
            pady=12,  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
            relief="raised",
            bd=2,
            cursor="hand2"
        )
        history_btn.pack(pady=20)

        # –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        history_btn.bind("<Enter>", lambda e: history_btn.config(bg="#388E3C"))
        history_btn.bind("<Leave>", lambda e: history_btn.config(bg="#2E7D32"))

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
        self.setup_styles()

    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        style = ttk.Style()

        # –°—Ç–∏–ª—å –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        style.configure("Accent.TButton", font=("Arial", 11, "bold"))

        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ - –í–´–î–ï–õ–ï–ù–ù–´–ô
        style.configure("History.TButton",
                        font=("Arial", 10, "bold"),
                        background="#4CAF50",  # –ó–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
                        foreground="white",  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
                        padding=(10, 5))

        # –°—Ç–∏–ª—å –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤
        style.configure("TCombobox", padding=5)

    def update_validation_status(self, *args):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏"""
        current_text = self.input_var.get()

        if not self.valid_input.get() and current_text not in ("", "-"):
            self.validation_label.config(text="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 23.5 –∏–ª–∏ -10)")
            # –ö—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –æ—à–∏–±–∫–∏, —á–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            self.entry.config(background="#ffcccc", foreground="black")
        else:
            self.validation_label.config(text="")
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞
            self.entry.config(background="white", foreground="black")

    def validate_input(self, new_text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        if new_text == "" or new_text == "-":
            self.valid_input.set(True)
            return True

        # –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
        if new_text.startswith("-"):
            number_part = new_text[1:]
            if number_part == "" or number_part == ".":
                self.valid_input.set(True)
                return True
            try:
                float(number_part)
                self.valid_input.set(True)
                return True
            except ValueError:
                self.valid_input.set(False)
                return False

        try:
            float(new_text)
            self.valid_input.set(True)
            return True
        except ValueError:
            self.valid_input.set(False)
            return False

    def show_validation_error(self):
        """–í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–º–∏–≥–∞–Ω–∏–µ)"""
        original_bg = self.entry.cget("background")
        original_fg = self.entry.cget("foreground")

        # –ú–∏–≥–∞–Ω–∏–µ –∫—Ä–∞—Å–Ω—ã–º —Ñ–æ–Ω–æ–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        self.entry.config(background="#ffcccc", foreground="black")
        self.entry.after(300, lambda: self.entry.config(
            background=original_bg,
            foreground=original_fg
        ))

    def validate_paste(self, text):
        try:
            float(text)
            return True
        except ValueError:
            return False

    def open_history_window(self):
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
        history_window = tk.Toplevel(self.root)
        history_window.title("–ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
        history_window.geometry("500x300+200+200")

        history_tree = ttk.Treeview(
            history_window,
            columns=("time", "input", "result"),
            show="headings",
            height=10
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        history_tree.heading("time", text="–í—Ä–µ–º—è")
        history_tree.heading("input", text="–í–≤–æ–¥")
        history_tree.heading("result", text="–†–µ–∑—É–ª—å—Ç–∞—Ç")

        history_tree.column("time", width=120)
        history_tree.column("input", width=150)
        history_tree.column("result", width=150)

        # –°–∫—Ä–æ–ª–ª–±–∞—Ä
        scrollbar = ttk.Scrollbar(history_window, orient=tk.VERTICAL, command=history_tree.yview)
        history_tree.configure(yscroll=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        history_tree.pack(fill=tk.BOTH, expand=True)

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
        for item in self.history:
            history_tree.insert("", tk.END, values=item)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π
        btn_frame = ttk.Frame(history_window)
        btn_frame.pack(pady=10)

        ttk.Button(
            btn_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
            command=lambda: [self.clear_history(), history_window.destroy()]
        ).pack(side=tk.LEFT, padx=10)

        ttk.Button(
            btn_frame, text="–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
            command=self.export_history  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–Ω–æ –ª–∏—à–Ω–µ–µ
        ).pack(side=tk.LEFT, padx=10)

        ttk.Button(
            btn_frame, text="–ó–∞–∫—Ä—ã—Ç—å",
            command=history_window.destroy
        ).pack(side=tk.RIGHT, padx=10)

        # –ó–∞–ø—Ä–µ—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–∫–æ–Ω
        history_window.focus_set()
        history_window.grab_set()

    def convert(self, event=None):
        if not self.valid_input.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return

        try:
            temp = float(self.input_var.get())
            from_unit = self.from_unit.get()
            to_unit = self.to_unit.get()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω—ã —Ä–∞–∑–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
            if from_unit == to_unit:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è")
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã)
            from_letter = from_unit[0].lower()  # "—Ü" -> "c", "—Ñ" -> "f", "–∫" -> "k"
            to_letter = to_unit[0].lower()

            # –†—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤
            russian_to_english = {"—Ü": "c", "—Ñ": "f", "–∫": "k"}
            from_letter = russian_to_english.get(from_letter, from_letter)
            to_letter = russian_to_english.get(to_letter, to_letter)

            conversion_type = f"{from_letter}_to_{to_letter}"

            if conversion_type == "c_to_f":
                result = TemperatureConverter.c_to_f(temp)
                self.result_label.config(text=f"{temp:.2f}¬∞C = {result:.2f}¬∞F")
                self.add_to_history(f"{temp:.2f}¬∞C", f"{result:.2f}¬∞F")

            elif conversion_type == "c_to_k":
                result = TemperatureConverter.c_to_k(temp)
                self.result_label.config(text=f"{temp:.2f}¬∞C = {result:.2f}K")
                self.add_to_history(f"{temp:.2f}¬∞C", f"{result:.2f}K")

            elif conversion_type == "f_to_c":
                result = TemperatureConverter.f_to_c(temp)
                self.result_label.config(text=f"{temp:.2f}¬∞F = {result:.2f}¬∞C")
                self.add_to_history(f"{temp:.2f}¬∞F", f"{result:.2f}¬∞C")

            elif conversion_type == "f_to_k":
                result = TemperatureConverter.f_to_k(temp)
                self.result_label.config(text=f"{temp:.2f}¬∞F = {result:.2f}K")
                self.add_to_history(f"{temp:.2f}¬∞F", f"{result:.2f}K")

            elif conversion_type == "k_to_c":
                result = TemperatureConverter.k_to_c(temp)
                self.result_label.config(text=f"{temp:.2f}K = {result:.2f}¬∞C")
                self.add_to_history(f"{temp:.2f}K", f"{result:.2f}¬∞C")

            elif conversion_type == "k_to_f":
                result = TemperatureConverter.k_to_f(temp)
                self.result_label.config(text=f"{temp:.2f}K = {result:.2f}¬∞F")
                self.add_to_history(f"{temp:.2f}K", f"{result:.2f}¬∞F")

            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {conversion_type}")

        except ValueError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", str(e))

    def on_unit_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
        from_unit = self.from_unit.get()
        to_unit = self.to_unit.get()

        if from_unit and to_unit and from_unit == to_unit:
            self.result_label.config(text="‚Äî", foreground="red")
        else:
            self.result_label.config(text="‚Äî", foreground="#2c3e50")

    def add_to_history(self, input_temp, result_temp):
        from_unit = self.from_unit.get()[:1].upper()
        to_unit = self.to_unit.get()[:1].upper()

        timestamp = datetime.now().strftime("%H:%M:%S")
        self.history.insert(0, (timestamp, input_temp, result_temp))

        if len(self.history) > 15:
            self.history = self.history[:15]

        self.save_history()

    def export_history(self):
        import csv
        from tkinter import filedialog

        file_path = filedialog.asksaveasfilename(
            defaultextension=".csv",
            filetypes=[("CSV Files", "*.csv")]
        )
        if file_path:
            with open(file_path, "w", newline='') as f:
                writer = csv.writer(f)
                writer.writerow(["Time", "Input", "Result"])
                writer.writerows(self.history)

    def clear_history(self):
        self.history = []
        self.save_history()

    def save_history(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        username = self.auth_system.get_current_user()
        history_file = f"history_{username}.json"

        with open(history_file, "w", encoding="utf-8") as f:
            json.dump(self.history, f, ensure_ascii=False, indent=2)

    def load_history(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        username = self.auth_system.get_current_user()
        history_file = f"history_{username}.json"

        if os.path.exists(history_file):
            try:
                with open(history_file, "r", encoding="utf-8") as f:
                    self.history = json.load(f)
            except:
                self.history = []


if __name__ == "__main__":
    root = tk.Tk()
    app = TemperatureConverter(root)
    root.mainloop()
